import{_ as e,c as s,o as i,V as t}from"./chunks/framework.Q5AHJ25T.js";const a="/skeleton/assets/build-app-ci.2PzDs3rs.svg",o="/skeleton/assets/build-app-steps.bFDC0jDF.svg",m=JSON.parse('{"title":"Deploy your app","description":"","frontmatter":{},"headers":[],"relativePath":"guides/development/deploy.md","filePath":"guides/development/deploy.md"}'),n={name:"guides/development/deploy.md"},r=t('<h1 id="deploy-your-app" tabindex="-1">Deploy your app <a class="header-anchor" href="#deploy-your-app" aria-label="Permalink to &quot;Deploy your app&quot;">​</a></h1><p>App deployment requires multiple steps, generally involving:</p><ol><li>creating a <strong>container image</strong> for your app, bundling your code and it&#39;s dependencies</li><li>pushing that container image on a <strong>container repository</strong> (private or public), like <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">dockerhub</a></li><li>when using <a href="https://kubernetes.io" target="_blank" rel="noreferrer">kubernetes</a>, creating a <strong>recipe</strong> to deploy your app on a cluster, we use <a href="https://helm.sh/docs/topics/charts/" target="_blank" rel="noreferrer">Helm charts</a> for this.</li><li>updating the project managing the configuration of the cluster to deploy your app (by including the Helm chart you created at step 3)</li></ol><p>Steps 1 and 2 are generally covered by the <strong>CI scripts</strong> in the app repository. When you push updates to the remote repository, the <strong>CI system</strong> kicks in and performs <strong>CI jobs</strong>. In the <code>skeleton</code> repository, the CI workflow is defined in the <a href="https://github.com/kalisio/skeleton/blob/master/.github/workflows/main.yaml" target="_blank" rel="noreferrer">.github/workflows/main.yaml</a> file. This is GitHub specific and defines jobs that are run when <strong>commits</strong> or <strong>tags</strong> are pushed. If you take a look at the file, you&#39;ll see that each job runs <code>bash</code> scripts located in the <a href="https://github.com/kalisio/skeleton/tree/master/scripts" target="_blank" rel="noreferrer">scripts</a> folder. This is because we like to keep our CI scripts <strong>CI system independent</strong>. In fact, you can even run them locally.</p><p>The CI system can be used for more than just app deployment, it can also be used to <a href="https://github.com/kalisio/skeleton/blob/master/scripts/run_tests.sh" target="_blank" rel="noreferrer">run atomated tests</a>, to <a href="https://github.com/kalisio/skeleton/blob/master/scripts/build_docs.sh" target="_blank" rel="noreferrer">build the documentation</a> and publish it ... but for now we&#39;ll focus on steps 1 and 2.</p><p>The following schema illustrates step 1 and 2. In the <code>skeleton</code> repository, the <code>build_app</code> job in the <a href="https://github.com/kalisio/skeleton/blob/master/.github/workflows/main.yaml" target="_blank" rel="noreferrer">CI workflow file</a> is responsible for this.</p><p><img src="'+a+`" alt="Build app CI"></p><h2 id="ci-scripts-dependencies" tabindex="-1">CI scripts dependencies <a class="header-anchor" href="#ci-scripts-dependencies" aria-label="Permalink to &quot;CI scripts dependencies&quot;">​</a></h2><p>The CI scripts we use rely on some external dependencies:</p><ul><li>the <a href="https://github.com/kalisio/kash" target="_blank" rel="noreferrer">kash</a> repository, it usually is a submodule in the <code>scripts</code> directory. Make sure you add it as a submodule using the <strong>public <code>https</code></strong> URL (without personnal token), ie. <code>cd scripts &amp;&amp; git submodule add https://github.com/kalisio/kash.git</code>. This is where we share useful bash code used in CI scenarios.</li><li>a <code>development</code> repository, often shared among multiples repositories part of a higher level project made of multiple repositories. The <a href="https://github.com/kalisio/development" target="_blank" rel="noreferrer">kalisio/development</a> repository is an exemple and is the one used by <code>skeleton</code> for it&#39;s CI. This repo contains useful utilities for local development, encrypted credentials to allow the CI system to push on private container repositories and <a href="https://github.com/kalisio/kli" target="_blank" rel="noreferrer">kli</a> files used during some CI steps.</li></ul><h2 id="build-app-job" tabindex="-1">Build app job <a class="header-anchor" href="#build-app-job" aria-label="Permalink to &quot;Build app job&quot;">​</a></h2><p>If we focus on the <code>build_app</code> <strong>CI job</strong> (defined in the <a href="https://github.com/kalisio/skeleton/blob/master/.github/workflows/main.yaml" target="_blank" rel="noreferrer">CI workflow</a>), we&#39;ll see it&#39;s made of 4 steps:</p><ol><li>checkout a fresh copy of the code in some isolated workspace</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout repo</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          submodules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # we use a submodule for kash</span></span></code></pre></div><ol start="2"><li>CI runner initialization</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Init runner</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash ./scripts/init_runner.sh \${{ github.job }}</span></span></code></pre></div><p>This calls the <code>init_runner.sh</code> script with the name of the job. It&#39;s purpose it to install required tools or packages for the current job (ie proper node version, mongodb, sops, ...).</p><ol start="3"><li>CI workspace setup</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup workspace</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          KALISIO_GITHUB_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.KALISIO_GITHUB_URL }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash ./scripts/setup_workspace.sh -k kli</span></span></code></pre></div><p>The <code>setup_workspace.sh</code> script purpose is to create a proper <strong>workspace</strong> for the CI to run, ie. make sure the app dependencies have been cloned along with the <code>development</code> utility repository associated to the project.</p><ol start="4"><li>build the app container image and push it</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build app</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          SOPS_AGE_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SOPS_AGE_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bash ./scripts/build_app.sh -p -r \${{ github.job }} -n \${{ matrix.node }} -d \${{ matrix.debian }}</span></span></code></pre></div><p>The <code>build_app.sh</code> script runs in the CI <strong>workspace</strong>, build the container image and push it to the target repository. It takes multiple arguments to remain versatile (<code>-p</code> to do the push, <code>-n</code> to specify the node version we use, ...)</p><p><img src="`+o+'" alt="Build app steps"></p><h2 id="updating-the-ci-scripts-for-your-needs" tabindex="-1">Updating the CI scripts for your needs <a class="header-anchor" href="#updating-the-ci-scripts-for-your-needs" aria-label="Permalink to &quot;Updating the CI scripts for your needs&quot;">​</a></h2><p>The CI scripts are fairly generic, and if you create a new app based on <code>skeleton</code>, here are the key points to get the scripts working for your app:</p><ul><li>give your app a proper <code>name</code> in the <code>package.json</code> file in the repository. This name <strong>must be lowercase</strong>.</li><li>add a <code>kli</code> file in the associated <code>development</code> repository. This file must be located in <code>$APP_NAME/$FLAVOR/$APP_NAME.js</code> (all in <strong>lowercase</strong>) somewhere in the <code>development</code> repo. That somewhere will be refered to as the <code>$KLI_BASE</code>. Other <code>kli</code> files may already be in this <code>$KLI_BASE</code> folder, you can use them as a base.</li><li>make sure the <code>development</code> repository contains encrypted credentials for the target container repository. We usually store these in <code>development/common</code>.</li></ul><p>You may now <code>grep TODO scripts/*.sh</code> and review all the places where you need to update the scripts.</p><h2 id="deployment-flavors" tabindex="-1">Deployment flavors <a class="header-anchor" href="#deployment-flavors" aria-label="Permalink to &quot;Deployment flavors&quot;">​</a></h2><p>Our CI system supports artefact <strong>flavors</strong>. We currently support three different flavors:</p><ul><li><strong>prod</strong> is what you get when building off a tag matching <code>prod-*</code>, it&#39;s intended for production environments.</li><li><strong>test</strong> is what you get when building off a branch matching <code>test|test-*</code>, it&#39;s intended for testing/preprod environments.</li><li><strong>dev</strong> is what you get when building off anything else (tag or branch).</li></ul><p>The flavor in app CI scripts is obtained using the <code>init_app_infos</code> helper and then calling <code>get_app_flavor</code>. These are all defined in <a href="https://github.com/kalisio/kash" target="_blank" rel="noreferrer">kash</a>.</p><p>The flavor is often used to build the container tag. In the skeleton <code>build_app.sh</code> script we build the image container using the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IMAGE_TAG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$VERSION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$FLAVOR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$NODE_VER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$DEBIAN_VER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p>It&#39;s also built into the container image using the <code>NODE_APP_INSTANCE</code> environment variable and can be used in the app config files to tailor configuration based on the flavor.</p>',35),l=[r];function p(h,d,c,k,u,g){return i(),s("div",null,l)}const b=e(n,[["render",p]]);export{m as __pageData,b as default};
