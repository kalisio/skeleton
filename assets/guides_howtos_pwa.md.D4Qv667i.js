import{_ as i,c as a,o as e,au as t}from"./chunks/framework.DtUFc-jG.js";const n="/skeleton/assets/service-worker.D4wOZtTx.svg",g=JSON.parse('{"title":"PWA","description":"","frontmatter":{},"headers":[],"relativePath":"guides/howtos/pwa.md","filePath":"guides/howtos/pwa.md"}'),p={name:"guides/howtos/pwa.md"};function l(h,s,o,r,k,c){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="pwa" tabindex="-1">PWA <a class="header-anchor" href="#pwa" aria-label="Permalink to &quot;PWA&quot;">​</a></h1><p>The skeleton is a <strong>Progressive Web App (PWA)</strong>, which means it functions as both a web page and a mobile app, offering a versatile experience on any device.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To build and run the skeleton as a PWA, check out the main commands <a href="https://kalisio.github.io/skeleton/guides/development/develop.html" target="_blank" rel="noreferrer">here</a></p></div><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><h3 id="web-app-manifest" tabindex="-1">Web app manifest <a class="header-anchor" href="#web-app-manifest" aria-label="Permalink to &quot;Web app manifest&quot;">​</a></h3><p>A web app manifest provides essential information about the application, such as its name, author, icon, and description, in a JSON text document. The purpose of the manifest is to allow the installation of applications on a device&#39;s home screen. You can find this manifest in the <a href="https://github.com/kalisio/skeleton/blob/master/quasar.config.js#L246" target="_blank" rel="noreferrer">Quasar configuration</a>.</p><h3 id="service-worker" tabindex="-1">Service Worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;Service Worker&quot;">​</a></h3><p><a href="https://github.com/kalisio/skeleton/blob/master/src-pwa/custom-service-worker.js" target="_blank" rel="noreferrer">Service workers</a>, which operate as JavaScript events, are a core component of a PWA and act as a proxy. They enable fast loading, offline access, push notifications, and other capabilities.</p><img src="'+n+`" style="margin-left:auto;margin-right:auto;"><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When the application is ready to be installed or updated, a pop-up window will appear.</p></div><h2 id="implementing-web-push-notifications" tabindex="-1">Implementing web push notifications <a class="header-anchor" href="#implementing-web-push-notifications" aria-label="Permalink to &quot;Implementing web push notifications&quot;">​</a></h2><p>This section outlines the process for integrating web push notifications into a Kalisio application. Web push notifications allow your application to send real-time notifications to users&#39; devices.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Web push notifications are managed by the <a href="https://github.com/kalisio/feathers-webpush" target="_blank" rel="noreferrer">feathers-webpush module</a>, which must be added as a dependency in the application&#39;s development folder.</p></div><h3 id="step-1-generate-vapid-keys" tabindex="-1">Step 1: Generate VAPID keys <a class="header-anchor" href="#step-1-generate-vapid-keys" aria-label="Permalink to &quot;Step 1: Generate VAPID keys&quot;">​</a></h3><p>VAPID (Voluntary Application Server Identification) keys are required for securely sending push notifications. These keys identify your application to the push service and are used for encrypting payloads.</p><ol><li><strong>Install</strong> the <code>web-push</code> library globally to use its command-line interface (CLI):</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web-push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><ol start="2"><li><strong>Generate VAPID Keys</strong></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">web-push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate-vapid-keys</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --json</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For more details on the CLI, see <a href="https://github.com/web-push-libs/web-push#command-line" target="_blank" rel="noreferrer">web-push CLI documentation</a>.</p></div><h3 id="step-2-configure-environment-variable" tabindex="-1">Step 2: Configure environment variable <a class="header-anchor" href="#step-2-configure-environment-variable" aria-label="Permalink to &quot;Step 2: Configure environment variable&quot;">​</a></h3><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>VAPID_SUBJECT=&quot;mailto:email-notifications@kalisio.com&quot;</span></span>
<span class="line"><span>VAPID_PUBLIC_KEY=&lt;Your Public Key from Step 1&gt;</span></span>
<span class="line"><span>VAPID_PRIVATE_KEY=&lt;Your Private Key from Step 1&gt;</span></span></code></pre></div><h3 id="step-3-configure-the-api" tabindex="-1">Step 3: Configure the API <a class="header-anchor" href="#step-3-configure-the-api" aria-label="Permalink to &quot;Step 3: Configure the API&quot;">​</a></h3><p>The KDK <a href="https://github.com/kalisio/kdk/blob/master/core/api/services/index.js#L169" target="_blank" rel="noreferrer">automatically sets up a Feathers.js service</a> for push notifications when configured correctly. Update the API configuration to include the VAPID details.</p><p>Edit the <code>app/api/config/default.cjs</code> file to include the push notification configuration. Add the following <code>push</code> object:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Other configurations...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  push: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vapidDetails: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      subject: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VAPID_SUBJECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      publicKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VAPID_PUBLIC_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      privateKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VAPID_PRIVATE_KEY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // By default, push service is not accessible externally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    disallowExternalPush: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Other configurations...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a reference implementation, see <a href="https://github.com/kalisio/kApp/blob/master/api/config/default.cjs#L213" target="_blank" rel="noreferrer">kApp/api/config/default.cjs</a>.</p></div><h3 id="step-4-expose-the-vapid-public-key-in-service-capabilities" tabindex="-1">Step 4: Expose the VAPID public key in service capabilities <a class="header-anchor" href="#step-4-expose-the-vapid-public-key-in-service-capabilities" aria-label="Permalink to &quot;Step 4: Expose the VAPID public key in service capabilities&quot;">​</a></h3><p>To allow clients to access the VAPID public key required for subscribing to push notifications, you need to expose it through the application&#39;s capabilities.</p><p>Edit the <code>app/api/src/services.js</code> file :</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vapidPublicKey: app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;push&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).vapidDetails.publicKey</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a reference implementation, see <a href="https://github.com/kalisio/kApp/blob/master/api/src/services.js#L21" target="_blank" rel="noreferrer">kApp/api/src/services.js</a>.</p></div><h3 id="step-5-subscribe-to-push-notifications-in-the-client" tabindex="-1">Step 5: Subscribe to push notifications in the client <a class="header-anchor" href="#step-5-subscribe-to-push-notifications-in-the-client" aria-label="Permalink to &quot;Step 5: Subscribe to push notifications in the client&quot;">​</a></h3><p>To receive push notifications, the client must subscribe to the push service after user authentication. <a href="https://github.com/kalisio/kdk/blob/master/core/client/utils/utils.push.js#L17" target="_blank" rel="noreferrer">KDK provides a utility function</a> to handle this subscription.</p><p>Modify the <code>app/src/boot/kdk.js</code> file to subscribe to push notifications after the user authenticates. Add the following code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Subscribe to webpush notifications</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;authenticated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// User will be updated in store just after login so that we need to wait for the event</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Events.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user-changed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, utils.subscribeToPushNotifications)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a reference implementation, see <a href="https://github.com/kalisio/kApp/blob/master/src/boot/kdk.js#L70" target="_blank" rel="noreferrer">kApp/src/boot/kdk.js</a>.</p></div><h3 id="step-6-handle-push-notifications-in-the-service-worker" tabindex="-1">Step 6: Handle push notifications in the service worker <a class="header-anchor" href="#step-6-handle-push-notifications-in-the-service-worker" aria-label="Permalink to &quot;Step 6: Handle push notifications in the service worker&quot;">​</a></h3><p>The service worker is responsible for receiving and displaying push notifications. Update the custom service worker file to handle push events and notification clicks.</p><p>Edit the <code>app/src-pwa/custom-service-worker.js</code> file to include the following code:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Web push notification</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clickOpenUrl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;push&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pushOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clickOpenUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pushOptions.url</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Show notification</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self.registration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pushOptions.title, pushOptions))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">self.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;notificationclick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Close notification if clicked</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.notification.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Open window on the specified url</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (clickOpenUrl) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> promiseChain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clients.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clickOpenUrl)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(promiseChain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For a reference implementation, see <a href="https://github.com/kalisio/kApp/blob/master/src-pwa/custom-service-worker.js#L24" target="_blank" rel="noreferrer">kApp/src-pwa/custom-service-worker.js</a>.</p></div><h3 id="step-7-sending-push-notifications" tabindex="-1">Step 7: Sending push notifications <a class="header-anchor" href="#step-7-sending-push-notifications" aria-label="Permalink to &quot;Step 7: Sending push notifications&quot;">​</a></h3><p>To send a push notification, use the push service created.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pushService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;push&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pushService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>For more details, refer to the <a href="https://github.com/kalisio/feathers-webpush" target="_blank" rel="noreferrer">feathers-webpush documentation</a>.</p></div>`,46)]))}const u=i(p,[["render",l]]);export{g as __pageData,u as default};
